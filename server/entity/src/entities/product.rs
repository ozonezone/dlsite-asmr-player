//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.0-rc.2

use super::sea_orm_active_enums::Age;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, rspc :: Type)]
#[sea_orm(table_name = "product")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub circle_id: String,
    pub actor: Vec<String>,
    pub author: Vec<String>,
    pub illustrator: Vec<String>,
    pub price: i32,
    pub sale_count: i32,
    pub age: Age,
    pub released_at: Date,
    pub rating_count: i32,
    pub comment_count: i32,
    pub path: String,
    pub image: String,
    pub description: Option<String>,
    pub series: Option<String>,
    #[sea_orm(column_type = "Float", nullable)]
    pub rating: Option<f32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::circle::Entity",
        from = "Column::CircleId",
        to = "super::circle::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Circle,
    #[sea_orm(has_many = "super::product_genre::Entity")]
    ProductGenre,
    #[sea_orm(has_many = "super::product_user_genre::Entity")]
    ProductUserGenre,
}

impl Related<super::circle::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Circle.def()
    }
}

impl Related<super::product_genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductGenre.def()
    }
}

impl Related<super::product_user_genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductUserGenre.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
